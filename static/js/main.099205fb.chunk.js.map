{"version":3,"sources":["utils/theme.ts","utils/authContext.ts","Pages/Dashboard/List.tsx","UI/Header.tsx","Pages/Dashboard/Picker.tsx","utils/api.ts","Pages/Dashboard/Home.tsx","Pages/Auth/LoginForm.tsx","Pages/Auth/Login.tsx","Router/Router.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["theme","extendTheme","colors","brand","900","800","700","initialState","isLogged","currentUser","undefined","handleLogin","handleLogout","AuthContext","React","createContext","List","followers","total","h","bg","w","p","direction","color","fontSize","mb","as","overflowY","flex","map","el","Fragment","from_name","followed_at","Header","useContext","alignItems","size","username","colorScheme","onClick","labelOptions","Picker","useState","isLoading","setIsLoading","isShowing","setIsShowing","currentLabel","setCurrentLabel","justifyContent","interval","counter","setInterval","length","console","log","clearInterval","in","api","axios","create","timeout","client_id","process","REACT_APP_TWITCH_CLIENT_ID","redirect_uri","REACT_APP_TWITCH_REDIRECT_URI","twitchAuthFlowURI","validateAuthToken","access_token","a","get","headers","Authorization","response","data","getFollowers","user_id","token","params","to_id","Home","setFollowers","setTotal","useEffect","handleGetFollowers","LoginForm","useForm","handleSubmit","errors","formState","onSubmit","window","open","isInvalid","name","message","mt","isSubmitting","type","leftIcon","Login","height","borderRadius","PrivateRoutes","path","component","HomePage","PublicRoutes","LoginPage","Router","App","setIsLogged","setCurrentUser","document","location","hash","match","substring","login","localStorage","setItem","authFlow","Provider","value","removeItem","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.099205fb.chunk.js","sourcesContent":["// 1. Import the extendTheme function\nimport { extendTheme } from \"@chakra-ui/react\";\n\n// 2. Extend the theme to include custom colors, fonts, etc\nconst colors = {\n  brand: {\n    900: \"#1a365d\",\n    800: \"#153e75\",\n    700: \"#2a69ac\",\n  },\n};\n\nexport const theme = extendTheme({ colors });\n","import React from \"react\";\n\nexport interface CurrentUser {\n  username: string;\n  user_id: string;\n  access_token: string;\n}\n\nexport interface AuthState {\n  isLogged: boolean;\n  currentUser: CurrentUser | undefined;\n  handleLogin?: () => void;\n  handleLogout?: () => void;\n}\n\nconst initialState: AuthState = {\n  isLogged: false,\n  currentUser: undefined,\n  handleLogin: () => {},\n  handleLogout: () => {},\n};\n\nexport const AuthContext = React.createContext(initialState);\n","import React from \"react\";\nimport { Box, Flex, Text } from \"@chakra-ui/react\";\nimport { Follower } from \"../../utils/api\";\n\ninterface Props {\n  followers: Array<Follower>;\n  total: number;\n}\n\nexport default function List({ followers, total }: Props) {\n  return (\n    <Box h=\"100vh\" bg=\"gray.900\" w=\"300px\">\n      <Flex p={4} h=\"100%\" direction=\"column\">\n        <Text color=\"white\" fontSize=\"xl\" mb={4}>\n          You have{\" \"}\n          <Text as=\"b\" color=\"purple.300\">\n            {total} followers\n          </Text>{\" \"}\n          ‚ù§Ô∏è\n        </Text>\n        <Box overflowY=\"scroll\" flex=\"1\">\n          {followers.map((el) => (\n            <React.Fragment key={el.followed_at}>\n              <Text color=\"white\">{el.from_name}</Text>\n            </React.Fragment>\n          ))}\n        </Box>\n      </Flex>\n    </Box>\n  );\n}\n","import React, { useContext } from \"react\";\nimport { Box, Button, Flex, Heading, Spacer, Text } from \"@chakra-ui/react\";\nimport { AuthContext } from \"../utils/authContext\";\n\nexport default function Header() {\n  const { handleLogout, currentUser } = useContext(AuthContext);\n\n  return (\n    <Flex w=\"100%\" alignItems=\"flex-start\" mb={4}>\n      <Box>\n        <Heading size=\"md\">\n          Welcome,\n          <br />\n          <Text color=\"purple.300\" as=\"i\">\n            {currentUser?.username}\n          </Text>\n          <br />\n          to your followers giveaway! üî•\n        </Heading>\n      </Box>\n      <Spacer />\n      <Box>\n        <Button colorScheme=\"red\" size=\"xs\" onClick={handleLogout}>\n          Log out\n        </Button>\n      </Box>\n    </Flex>\n  );\n}\n","import React from \"react\";\nimport { Flex, Button, Fade, Text } from \"@chakra-ui/react\";\nimport { Header } from \"../../UI\";\n\nconst labelOptions = [\n  \"Connecting to the private server...\",\n  \"Choosing the best follower...\",\n  \"Removing blacklisted users...\",\n  \"Computing results...\",\n];\n\nexport default function Picker() {\n  const [isLoading, setIsLoading] = React.useState<boolean>(false);\n  const [isShowing, setIsShowing] = React.useState<boolean>(false);\n  const [currentLabel, setCurrentLabel] = React.useState<string>(\n    labelOptions[0]\n  );\n\n  const handleWinner = () => {\n    let interval: any;\n    let counter = 0;\n\n    if (interval) {\n      return;\n    }\n\n    setIsShowing(true);\n    setIsLoading(true);\n    setCurrentLabel(labelOptions[0]);\n\n    interval = setInterval(() => {\n      if (counter <= labelOptions.length - 1) {\n        setCurrentLabel(labelOptions[counter]);\n        setIsShowing(false);\n        counter++;\n        console.log(\"Counting\", counter);\n        console.log(\"Showing\", isShowing);\n      } else {\n        setIsShowing(false);\n        setIsLoading(false);\n        setCurrentLabel(\"\");\n        console.log(\"Exiting\", counter);\n        clearInterval(interval);\n        interval = null;\n      }\n      setIsShowing(true);\n    }, 2500);\n  };\n\n  return (\n    <Flex p={4} direction=\"column\" flex={1}>\n      <Header />\n      <Flex\n        flex={1}\n        direction=\"column\"\n        justifyContent=\"center\"\n        alignItems=\"center\"\n      >\n        <Button\n          size=\"lg\"\n          colorScheme=\"purple\"\n          isLoading={isLoading}\n          onClick={handleWinner}\n          mb={4}\n        >\n          Choose a winner!\n        </Button>\n        <Fade in={isShowing}>\n          <Text color=\"purple.300\">{currentLabel}</Text>\n        </Fade>\n        <Text>{isShowing}</Text>\n      </Flex>\n    </Flex>\n  );\n}\n","import axios from \"axios\";\n\nexport const api = axios.create({\n  timeout: 10000,\n});\n\nconst client_id = process.env.REACT_APP_TWITCH_CLIENT_ID;\nconst redirect_uri = process.env.REACT_APP_TWITCH_REDIRECT_URI;\nconst response_type = \"token\";\nconst scope = \"channel:read:subscriptions user:read:email\";\n\nexport const twitchAuthFlowURI = `https://id.twitch.tv/oauth2/authorize?client_id=${client_id}&redirect_uri=${redirect_uri}&response_type=${response_type}&scope=${scope}`;\n\ninterface ValidateAuthTokenResponse {\n  client_id: string;\n  expires_in: number;\n  login: string;\n  scopes: Array<string>;\n  user_id: string;\n}\n\nexport const validateAuthToken = async (\n  access_token: string\n): Promise<ValidateAuthTokenResponse> => {\n  const response = await api.get(\"https://id.twitch.tv/oauth2/validate\", {\n    headers: {\n      Authorization: `OAuth ${access_token}`,\n    },\n  });\n\n  return response.data;\n};\n\nexport interface FollowersResponse {\n  total: number;\n  data: Array<Follower>;\n  pagination: {\n    cursor: string;\n  };\n}\n\nexport interface Follower {\n  from_id: string;\n  from_name: string;\n  to_id: string;\n  to_name: string;\n  followed_at: string;\n}\n\nexport const getFollowers = async (\n  user_id: string,\n  token: string\n): Promise<FollowersResponse> => {\n  const response = await api.get(\"https://api.twitch.tv/helix/users/follows\", {\n    params: {\n      to_id: user_id,\n    },\n    headers: {\n      Authorization: `Bearer ${token}`,\n      \"Client-Id\": client_id,\n    },\n  });\n\n  return response.data;\n};\n","import React, { useContext } from \"react\";\nimport { Box, Flex } from \"@chakra-ui/react\";\nimport List from \"./List\";\nimport Picker from \"./Picker\";\nimport { getFollowers } from \"../../utils/api\";\nimport { AuthContext } from \"../../utils/authContext\";\n\nfunction Home(): React.ReactElement {\n  const [followers, setFollowers] = React.useState<any>([]);\n  const [total, setTotal] = React.useState<any>(undefined);\n  const { currentUser } = useContext(AuthContext);\n\n  React.useEffect(() => {\n    handleGetFollowers();\n  }, []);\n\n  const handleGetFollowers = async () => {\n    const response = await getFollowers(\n      currentUser?.user_id!,\n      currentUser?.access_token!\n    );\n    setTotal(response.total);\n    setFollowers(response.data);\n  };\n\n  return (\n    <Flex>\n      <List followers={followers} total={total} />\n      <Picker />\n    </Flex>\n  );\n}\n\nexport default Home;\n","import React, { useContext } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { FormErrorMessage, FormControl, Button } from \"@chakra-ui/react\";\nimport { FaTwitch } from \"react-icons/fa\";\nimport { AuthContext } from \"../../utils/authContext\";\nimport { twitchAuthFlowURI } from \"../../utils/api\";\n\nexport default function LoginForm() {\n  const { handleSubmit, errors, formState } = useForm();\n\n  function onSubmit() {\n    window.open(twitchAuthFlowURI);\n  }\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <FormControl isInvalid={errors.name}>\n        <FormErrorMessage>\n          {errors.name && errors.name.message}\n        </FormErrorMessage>\n      </FormControl>\n      <Button\n        mt={4}\n        colorScheme=\"purple\"\n        isLoading={formState.isSubmitting}\n        type=\"submit\"\n        w=\"100%\"\n        leftIcon={<FaTwitch />}\n      >\n        Sign in with Twitch\n      </Button>\n    </form>\n  );\n}\n","import React from \"react\";\nimport { Box, Button, Flex } from \"@chakra-ui/react\";\nimport { Text } from \"@chakra-ui/react\";\n\nimport LoginForm from \"./LoginForm\";\n\nfunction Login(): React.ReactElement {\n  return (\n    <Flex\n      bg={\"gray.900\"}\n      height=\"100vh\"\n      justifyContent=\"center\"\n      alignItems=\"center\"\n    >\n      <Box bg={\"white\"} w=\"400px\" p={4} borderRadius={5}>\n        <Text fontSize=\"3xl\">Sign in</Text>\n        <Text fontSize=\"sm\">\n          Give your followers something special ‚ù§Ô∏è <br />\n          Use your twitch account to get started.\n        </Text>\n        <LoginForm />\n      </Box>\n    </Flex>\n  );\n}\n\nexport default Login;\n","import React, { useContext } from \"react\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport { HomePage, LoginPage } from \"../Pages\";\nimport { AuthContext } from \"../utils/authContext\";\n\nconst PrivateRoutes = (\n  <Switch>\n    <Route path=\"/\" component={HomePage} />\n  </Switch>\n);\n\nconst PublicRoutes = (\n  <Switch>\n    <Route path=\"/\" component={LoginPage} />\n  </Switch>\n);\n\nfunction Router(): React.ReactElement {\n  const { isLogged } = useContext(AuthContext);\n  return (\n    <BrowserRouter>{isLogged ? PrivateRoutes : PublicRoutes}</BrowserRouter>\n  );\n}\n\nexport default Router;\n","import React from \"react\";\nimport { ChakraProvider } from \"@chakra-ui/react\";\nimport { theme } from \"./utils\";\nimport { AuthContext, CurrentUser } from \"./utils/authContext\";\nimport { Router } from \"./Router\";\nimport { validateAuthToken } from \"./utils/api\";\n\nfunction App() {\n  const [isLogged, setIsLogged] = React.useState<boolean>(false);\n  const [currentUser, setCurrentUser] = React.useState<CurrentUser | undefined>(\n    undefined\n  );\n\n  React.useEffect(() => {\n    const access_token = document.location.hash.match(\n      /#access_token=([a-zA-Z0-9]*)/g\n    );\n\n    if (access_token?.length) {\n      const token = access_token![0].substring(14);\n\n      const authFlow = async (access_token: string) => {\n        const response = await validateAuthToken(token);\n\n        const { login: username, user_id } = response;\n\n        if (response) {\n          setCurrentUser({\n            user_id,\n            username,\n            access_token: token,\n          });\n          localStorage.setItem(\"access_token\", token);\n          return login();\n        }\n      };\n\n      authFlow(token);\n    }\n  }, []);\n\n  const login = () => {\n    setIsLogged(true);\n    localStorage.setItem(\"is_logged\", \"true\");\n  };\n\n  const logout = () => {\n    setIsLogged(false);\n    localStorage.removeItem(\"is_logged\");\n    localStorage.removeItem(\"access_token\");\n    document.location.hash = \"\";\n  };\n\n  return (\n    <AuthContext.Provider\n      value={{\n        currentUser,\n        isLogged: isLogged,\n        handleLogin: login,\n        handleLogout: logout,\n      }}\n    >\n      <ChakraProvider theme={theme}>\n        <Router />\n      </ChakraProvider>\n    </AuthContext.Provider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}